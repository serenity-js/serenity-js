"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[5664],{82247:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var a=n(14041);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,y=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},31376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(89575),r=(n(14041),n(82247));const i={slug:"introducing-dynamic-descriptions",title:"Introducing dynamic descriptions",authors:["jan-molak"],tags:["core","web","open-source"]},o=void 0,s={permalink:"/blog/introducing-dynamic-descriptions",editUrl:"https://github.com/serenity-js/serenity-js/tree/main/documentation/serenity-js.org/blog/2024-06-17-introducing-dynamic-descriptions/index.mdx",source:"@site/blog/2024-06-17-introducing-dynamic-descriptions/index.mdx",title:"Introducing dynamic descriptions",description:"\ud83d\udce3 Serenity/JS Tasks, Interactions and Questions now support dynamic descriptions \ud83c\udf89",date:"2024-06-17T00:00:00.000Z",formattedDate:"June 17, 2024",tags:[{label:"core",permalink:"/blog/tags/core"},{label:"web",permalink:"/blog/tags/web"},{label:"open-source",permalink:"/blog/tags/open-source"}],readingTime:7.18,hasTruncateMarker:!0,authors:[{name:"Jan Molak",url:"https://github.com/jan-molak",imageURL:"https://github.com/jan-molak.png",key:"jan-molak"}],frontMatter:{slug:"introducing-dynamic-descriptions",title:"Introducing dynamic descriptions",authors:["jan-molak"],tags:["core","web","open-source"]},nextItem:{title:"Support for @tags",permalink:"/blog/support-for-tags"}},p={authorsImageUrls:[void 0]},l=[{value:"The old world of static descriptions",id:"the-old-world-of-static-descriptions",level:2},{value:"Using dynamic descriptions",id:"using-dynamic-descriptions",level:2},{value:"Formatting the output",id:"formatting-the-output",level:3},{value:"Querying the description",id:"querying-the-description",level:3},{value:"Overriding the default description",id:"overriding-the-default-description",level:3},{value:"Dynamic descriptions for notes",id:"dynamic-descriptions-for-notes",level:3},{value:"Your feedback matters!",id:"your-feedback-matters",level:2},{value:"\ud83d\udce3 Stay up to date",id:"-stay-up-to-date",level:3},{value:"\ud83d\udc9b Support Serenity/JS",id:"-support-serenityjs",level:3}],c={toc:l},d="wrapper";function m(e){let{components:t,...i}=e;return(0,r.yg)(d,(0,a.A)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"\ud83d\udce3 Serenity/JS Tasks, Interactions and Questions now support dynamic descriptions \ud83c\udf89"),(0,r.yg)("p",null,"With the new release of ",(0,r.yg)("a",{parentName:"p",href:"/changelog/3.24.0"},(0,r.yg)("strong",{parentName:"a"},"Serenity/JS 3.24")),", descriptions of ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Task/"},"Tasks"),",\n",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Interaction/"},"Interactions"),", and ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Question/"},"Questions"),", including ",(0,r.yg)("a",{parentName:"p",href:"/handbook/design/assertions/"},"assertions"),"\nand ",(0,r.yg)("a",{parentName:"p",href:"/handbook/design/waiting-and-synchronisation/"},"synchronisation statements"),",\ncan be ",(0,r.yg)("strong",{parentName:"p"},"determined dynamically at runtime")," and incorporate the actual values of static and dynamic parameters you passed in."),(0,r.yg)("p",null,"The new dynamic descriptions feature is particularly useful when designing custom Serenity/JS tasks that\naccept ",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/notes/"},"notes")," or other dynamic data structures like ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Question/"},"questions"),",\n",(0,r.yg)("a",{parentName:"p",href:"/api/core/#QuestionAdapter"},"question adapters"),", or ",(0,r.yg)("a",{parentName:"p",href:"/api/core/#Answerable"},"answerables"),"."),(0,r.yg)("p",null,"Long story short: to use dynamic descriptions, upgrade to Serenity/JS 3.24 and replace ",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/format/"},(0,r.yg)("inlineCode",{parentName:"a"},"d")),"\nwith ",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/the/"},(0,r.yg)("inlineCode",{parentName:"a"},"the"))," in your custom Task and Interaction definitions:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},"- import { Task, d } from '@serenity-js/core';\n+ import { Task, the } from '@serenity-js/core';\n\nexport const recordItem = (name: Answerable<string>): Task =>\n- Task.where(d`#actor records an item called ${ name }`,\n+ Task.where(the`#actor records an item called ${ name }`,\n    Enter.theValue(name).into(newTodoInput()),\n    Press.the(Key.Enter).in(newTodoInput()),\n    Wait.until(itemNames(), contain(name)),\n  )\n")),(0,r.yg)("p",null,"This tiny change to your code will enable your Serenity reports to show the actual values of your task and interaction parameters."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Support for dynamic descriptions",src:n(39046).A,width:"4198",height:"3049"})),(0,r.yg)("p",null,"Want to learn more? ",(0,r.yg)("a",{parentName:"p",href:"/blog/introducing-dynamic-descriptions/#the-old-world-of-static-descriptions"},"Read on"),"!"),(0,r.yg)("h2",{id:"the-old-world-of-static-descriptions"},"The old world of static descriptions"),(0,r.yg)("p",null,"Before Serenity/JS 3.24, descriptions of custom ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Task/"},"Tasks"),", ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Interaction/"},"Interactions"),"\nand ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Question/"},"Questions")," had to be defined using a static ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," value.\nThis meant they had to be known when the class was instantiated and couldn't change at runtime."),(0,r.yg)("p",null,"A typical implementation of a custom task would look similar to this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { contain } from '@serenity-js/assertions';\nimport { d, Task, Wait } from '@serenity-js/core';\nimport { Enter, Key, Press } from '@serenity-js/web';\n\nimport { newTodoInput } from '../TodoApp';\nimport { itemNames } from '../TodoList';\n\nexport const recordItem = (name: Answerable<string>): Task => // factory function\n  Task.where(d`#actor records an item called ${ name }`,      // static description\n    Enter.theValue(name).into(newTodoInput()),\n    Press.the(Key.Enter).in(newTodoInput()),\n    Wait.until(itemNames(), contain(name)),\n  )\n")),(0,r.yg)("p",null,"Here, the ",(0,r.yg)("inlineCode",{parentName:"p"},"recordItem(name)")," factory function producing the ",(0,r.yg)("inlineCode",{parentName:"p"},"Task")," accepts\na parameter of type ",(0,r.yg)("a",{parentName:"p",href:"/api/core/#Answerable"},(0,r.yg)("inlineCode",{parentName:"a"},"Answerable<string>")),". This design  offers the most freedom to the person\nusing such factory function in their test scenarios as it allows for the parameter to be either a static ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),",\nor any dynamic Serenity/JS data structure that resolves to a ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),".\nSerenity/JS uses this flexible API design extensively, too."),(0,r.yg)("p",null,"However, even though the task parameter itself can be determined dynamically at runtime,\nthe description of the task is a static ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),"\nthat's defined when the task is created."),(0,r.yg)("p",null,"To make creating such static descriptions easier,\nSerenity/JS offers a ",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/format/"},"formatting function - ",(0,r.yg)("inlineCode",{parentName:"a"},"d")),".\nThis ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates"},"tag function"),"\ninspects the parameters injected into the template literal, and for primitive data types like ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"number")," leaves their value as is,\nand for the complex types tries to generate a sensible description."),(0,r.yg)("p",null,"Unfortunately, it tends to fall short when producing descriptions of chained ",(0,r.yg)("a",{parentName:"p",href:"/api/core/#QuestionAdapter"},"question adapters"),"."),(0,r.yg)("p",null,"For example, the following scenario:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"await actor.attemptsTo(\n\n  startWithAnEmptyList(),\n\n  notes<MyNotes>().set('items', [ 'read a book' ]),\n\n  recordItem(notes<MyNotes>().get('items')[0]),\n\n  Ensure.that(\n    itemNames(),\n    contain(notes().get('items')[0])\n  ),\n);\n")),(0,r.yg)("p",null,"would produce a report with the dynamic note parameter described as ",(0,r.yg)("inlineCode",{parentName:"p"},"<<a note of items>>[0]"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'Alice starts with an empty list\nAlice takes note of items\nAlice records an item called <<a note of items>>[0]\n    Alice enters \'<<a note of items>>[0]\' into "What needs to be done?" input box\n    Alice presses key Enter in "What needs to be done?" input box\n    Alice waits until displayed items contain <<a note of items>>[0]\nAlice ensures that displayed items contain <<a note of items>>[0]\n')),(0,r.yg)("p",null,"While this description is accurate and correct, it could be more developer-friendly."),(0,r.yg)("h2",{id:"using-dynamic-descriptions"},"Using dynamic descriptions"),(0,r.yg)("p",null,"Starting with Serenity/JS 3.24, descriptions provided to ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Task/#where"},(0,r.yg)("inlineCode",{parentName:"a"},"Task.where")),",\n",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Interaction/#where"},(0,r.yg)("inlineCode",{parentName:"a"},"Interaction.where"))," and ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Question/#about"},(0,r.yg)("inlineCode",{parentName:"a"},"Question.about")),"\ncan be a dynamic ",(0,r.yg)("inlineCode",{parentName:"p"},"Answerable<string>")," instead of just a static ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),".\nDescriptions defined this way get resolved when the activity is performed, rather than when it's instantiated."),(0,r.yg)("p",null,"It's very easy to modify your existing custom tasks and interaction as all you need to do is to use the new tag function\n",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/the/"},(0,r.yg)("inlineCode",{parentName:"a"},"the"))," - a far more powerful successor of ",(0,r.yg)("inlineCode",{parentName:"p"},"d"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { contain } from '@serenity-js/assertions';\nimport { Task, the, Wait } from '@serenity-js/core';    // use `the`, not `d`\nimport { Enter, Key, Press } from '@serenity-js/web';\n\nimport { newTodoInput } from '../TodoApp';\nimport { itemNames } from '../TodoList';\n\nexport const recordItem = (name: Answerable<string>): Task => // factory function\n  Task.where(the`#actor records an item called ${ name }`,    // dynamic description\n    Enter.theValue(name).into(newTodoInput()),\n    Press.the(Key.Enter).in(newTodoInput()),\n    Wait.until(itemNames(), contain(name)),\n  )\n")),(0,r.yg)("p",null,"Replacing ",(0,r.yg)("inlineCode",{parentName:"p"},"d")," with ",(0,r.yg)("inlineCode",{parentName:"p"},"the")," in your custom tasks and interactions will make your Serenity reports more developer-friendly,\nespecially if you're using ",(0,r.yg)("a",{parentName:"p",href:"/api/core/function/notes/"},(0,r.yg)("inlineCode",{parentName:"a"},"notes"))," or other dynamic data structures in your test scenarios:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'Alice starts with an empty list\nAlice takes notes:\n- items: [ \'read a book\' ]\nAlice records an item called "read a book"\n    Alice enters "read a book" into "What needs to be done?" input box\n    Alice presses key Enter in "What needs to be done?" input box\n    Alice waits until displayed items contain "read a book"\nAlice ensures that displayed items contain "read a book"\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"the")," works in a similar way to ",(0,r.yg)("inlineCode",{parentName:"p"},"d"),", with two significant differences:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"it gives you more flexibility over how the output is formatted"),(0,r.yg)("li",{parentName:"ul"},"it queries the parameters to determine their description instead of inspecting them")),(0,r.yg)("h3",{id:"formatting-the-output"},"Formatting the output"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"the")," allows you to ",(0,r.yg)("a",{parentName:"p",href:"/api/core/interface/DescriptionFormattingOptions/"},"configure the formatting"),",\nso you can trim the descriptions of long input parameters:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"the({ maxLength: 16 })`#actor records an item called ${ name }`,\n// ^ trims any template parameter to 16 characters, so that calling:\n//\n// actor.attemptsto(\n//   recordItem('Really long string')\n// )\n//\n// gets reported as:\n//   `Alice records an item called \"Really long s...\"`\n")),(0,r.yg)("p",null,"By default, descriptions are not trimmed."),(0,r.yg)("h3",{id:"querying-the-description"},"Querying the description"),(0,r.yg)("p",null,"Starting with Serenity/JS 3.24, ",(0,r.yg)("inlineCode",{parentName:"p"},"Task"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Interaction")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Question")," are now ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Describable/"},(0,r.yg)("inlineCode",{parentName:"a"},"Describable")),"\nand offer a new public method ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Describable/#describedBy"},(0,r.yg)("inlineCode",{parentName:"a"},"describedBy(actor)")),", expected to return\nthe description of the object, in the context of the given actor, at the current point in time."),(0,r.yg)("p",null,"If a parameter injected into the template literal is a ",(0,r.yg)("inlineCode",{parentName:"p"},"Describable"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"the")," will call its ",(0,r.yg)("inlineCode",{parentName:"p"},"describedBy(actor)"),"\nmethod to determine its description."),(0,r.yg)("p",null,"To ensure backwards compatibility, all questions created via ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Question/#about"},(0,r.yg)("inlineCode",{parentName:"a"},"Question.about"))," are still described using their static description by default.\nAnd so, executing the below scenario:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { Ensure, isAfter } from '@serenity-js/assertions';\nimport { Question, isAfter, the, Timestamp } from '@serenity-js/core';\n\nconst now = () =>\n  Question.about('current time', actor => Timestamp.now());\n\nconst setClockTo = (time: Answerable<Timestamp>) =>\n  Task.where(the`#actor sets the clock to ${ time }`,\n    // log the parameter and pretend we're setting some clock\n    Log.the(time)\n  )\n\nawait actor.attemptsTo(\n  setClockTo(now()),\n);\n")),(0,r.yg)("p",null,"will result in a test report similar to the below:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"Alice sets the clock to current time\n")),(0,r.yg)("h3",{id:"overriding-the-default-description"},"Overriding the default description"),(0,r.yg)("p",null,"You can now override the default description of a question and make it dynamic, for example to have some of your custom questions reported using their actual value."),(0,r.yg)("p",null,"To do that, override their default description by calling:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Question#describedAs(Question.formattedValue())"),","),(0,r.yg)("li",{parentName:"ul"},"or ",(0,r.yg)("inlineCode",{parentName:"li"},"Question#describedAs(Question.formattedValue({ maxLength: number }))"),":")),(0,r.yg)("p",null,"Below, the factory function ",(0,r.yg)("inlineCode",{parentName:"p"},"now()")," returns a custom question designed to be reported using its formatted returned value:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { Ensure, isAfter } from '@serenity-js/assertions';\nimport { Question, isAfter, the, Timestamp } from '@serenity-js/core';\n\nconst now = () =>\n  Question.about('current time', actor => Timestamp.now())\n    .describedAs(Question.formattedValue());\n\nconst setClockTo = (time: Answerable<Timestamp>) =>\n  Task.where(the`#actor sets the clock to ${ time }`,\n    // log the parameter and pretend we're setting some clock\n    Log.the(time)\n  )\n\nawait actor.attemptsTo(\n  setClockTo(now()),\n);\n")),(0,r.yg)("p",null,"The modified implementation will now produce report output similar to the below:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"Alice sets the clock to 2024-06-17T19:29:16.704Z\n")),(0,r.yg)("h3",{id:"dynamic-descriptions-for-notes"},"Dynamic descriptions for notes"),(0,r.yg)("p",null,"Starting with Serenity/JS 3.24, question adapter returned by calling ",(0,r.yg)("inlineCode",{parentName:"p"},"notes<T>.get('noteName')")," is described using the formatted value of the note.\nIf you'd rather have it use a static description instead, you can override it by calling ",(0,r.yg)("a",{parentName:"p",href:"/api/core/class/Question/#describedAs"},(0,r.yg)("inlineCode",{parentName:"a"},"Question#describedAs(description)")),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"await actor.attemptsTo(\n\n  startWithAnEmptyList(),\n\n  notes<MyNotes>().set('items', [ 'read a book' ]),\n\n  recordItem(\n    notes<MyNotes>().get('items')[0].describedAs('first item')\n  ),\n\n  Ensure.that(\n    itemNames(),\n    contain(notes().get('items')[0])\n  ),\n);\n")),(0,r.yg)("h2",{id:"your-feedback-matters"},"Your feedback matters!"),(0,r.yg)("p",null,"I hope this latest release of Serenity/JS will make it even easier for you and your team to create high-quality test automation."),(0,r.yg)("p",null,"Let me know what you think of the new features in the comments below \ud83d\udc47\ud83d\udc47\ud83d\udc47"),(0,r.yg)("h3",{id:"-stay-up-to-date"},"\ud83d\udce3 Stay up to date"),(0,r.yg)("p",null,"New features, tutorials, and demos are coming soon!\nFollow ",(0,r.yg)("a",{parentName:"p",href:"https://www.linkedin.com/company/serenity-js"},"Serenity/JS on LinkedIn"),",\nsubscribe to ",(0,r.yg)("a",{parentName:"p",href:"https://www.youtube.com/@serenity-js"},"Serenity/JS channel on YouTube")," and join the ",(0,r.yg)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},"Serenity/JS Community Chat")," to stay up to date!\nPlease also make sure to star \u2b50\ufe0f ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js"},"Serenity/JS on GitHub")," to help others discover the framework!"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.linkedin.com/company/serenity-js"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin",alt:"Follow Serenity/JS on LinkedIn"})),"\n",(0,r.yg)("a",{parentName:"p",href:"https://www.youtube.com/@serenity-js"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube",alt:"Watch Serenity/JS on YouTube"})),"\n",(0,r.yg)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix",alt:"Join Serenity/JS Community Chat"})),"\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge",alt:"GitHub stars"}))),(0,r.yg)("h3",{id:"-support-serenityjs"},"\ud83d\udc9b Support Serenity/JS"),(0,r.yg)("p",null,"If you appreciate all the effort that goes into making sophisticated tools easy to work with, please support our work and become a Serenity/JS GitHub Sponsor today!"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://github.com/sponsors/serenity-js"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white",alt:"GitHub Sponsors"}))))}m.isMDXComponent=!0},39046:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/dynamic-descriptions-report-9fa862459f9a59bab1699dd41b864ffe.png"}}]);