"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[772],{82247:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(14041);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,g=m["".concat(l,".").concat(u)]||m[u]||y[u]||r;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},57588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(89575),i=(n(14041),n(82247));const r={sidebar_position:3},o="Waiting and synchronisation",s={unversionedId:"design/waiting-and-synchronisation",id:"design/waiting-and-synchronisation",title:"Waiting and synchronisation",description:"Serenity/JS helps you model your test scenarios from the perspective of actors performing activities to accomplish their goals.",source:"@site/docs/design/waiting-and-synchronisation.mdx",sourceDirName:"design",slug:"/design/waiting-and-synchronisation",permalink:"/handbook/design/waiting-and-synchronisation",draft:!1,editUrl:"https://github.com/serenity-js/serenity-js/tree/main/documentation/serenity-js.org/docs/design/waiting-and-synchronisation.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Assertions and expectations",permalink:"/handbook/design/assertions"},next:{title:"Logging",permalink:"/handbook/design/logging"}},l={},p=[{value:"The anatomy of a synchronisation statement",id:"the-anatomy-of-a-synchronisation-statement",level:2},{value:"Wait vs Ensure",id:"wait-vs-ensure",level:2},{value:"Implementing custom expectations",id:"implementing-custom-expectations",level:2}],c={toc:p},m="wrapper";function y(e){let{components:t,...n}=e;return(0,i.yg)(m,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"waiting-and-synchronisation"},"Waiting and synchronisation"),(0,i.yg)("p",null,"Serenity/JS helps you model your test scenarios from the perspective of ",(0,i.yg)("a",{parentName:"p",href:"/api/core/class/Actor"},"actors")," performing ",(0,i.yg)("a",{parentName:"p",href:"/api/core/class/Activity"},"activities")," to accomplish their goals.\nWaiting for a condition to occur follows this same consistent approach, with any synchronisation statements assertions expressed using the interaction to ",(0,i.yg)("a",{parentName:"p",href:"/api/core/class/Wait#until"},(0,i.yg)("inlineCode",{parentName:"a"},"Wait.until")),"."),(0,i.yg)("h2",{id:"the-anatomy-of-a-synchronisation-statement"},"The anatomy of a synchronisation statement"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Wait.until")," follows the same consistent pattern as ",(0,i.yg)("a",{parentName:"p",href:"/api/assertions/class/Ensure#eventually"},(0,i.yg)("inlineCode",{parentName:"a"},"Ensure.eventually"))," and accepts two arguments:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"the ",(0,i.yg)("a",{parentName:"li",href:"http://xunitpatterns.com/ResultVerification.html"},'"actual value"')," - an ",(0,i.yg)("a",{parentName:"li",href:"/api/core#Answerable"},(0,i.yg)("inlineCode",{parentName:"a"},"Answerable"))," to be evaluated in the context of the given ",(0,i.yg)("a",{parentName:"li",href:"/api/core/class/Actor"},"actor"),","),(0,i.yg)("li",{parentName:"ul"},"an ",(0,i.yg)("a",{parentName:"li",href:"/api/core/class/Expectation"},(0,i.yg)("inlineCode",{parentName:"a"},"Expectation"))," that defines the condition to be met by the actual value.")),(0,i.yg)("p",null,"An example Serenity/JS synchronisation statement might look like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Wait } from '@serenity-js/core'\nimport { and, startsWith, endsWith } from '@serenity-js/assertions'\n\nawait actorCalled('Edna').attemptsTo(\n    Wait.until('Hello world', and(startsWith('Hello'), endsWith('world'))),\n    //   actual value --^      ^-- expectation\n)\n")),(0,i.yg)("h2",{id:"wait-vs-ensure"},"Wait vs Ensure"),(0,i.yg)("p",null,"Same as the interaction to ",(0,i.yg)("a",{parentName:"p",href:"/handbook/design/assertions#fault-tolerant-assertions"},(0,i.yg)("inlineCode",{parentName:"a"},"Ensure.eventually")),",\n",(0,i.yg)("inlineCode",{parentName:"p"},"Wait.until"),' allows for the "actual value" to be ',(0,i.yg)("a",{parentName:"p",href:"/api/core/class/Question"},(0,i.yg)("strong",{parentName:"a"},"determined dynamically")),"\nand resolved in the context of the actor performing the assertion."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-html"},'<span class="spinner">Loading...</span>\n')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Wait } from '@serenity-js/core'\nimport { not, isPresent } from '@serenity-js/assertions'\nimport { PageElement, By } from '@serenity-js/web'\n\nconst spinner = () =>\n    PageElement.located(By.css('.spinner')).describedAs('spinner')\n\nawait actorCalled('Edna').attemptsTo(\n    Wait.until(spinner(), not(isPresent())),\n)\n")),(0,i.yg)("p",null,"Again, same as the interaction to ",(0,i.yg)("a",{parentName:"p",href:"/handbook/design/assertions#fault-tolerant-assertions"},(0,i.yg)("inlineCode",{parentName:"a"},"Ensure.eventually")),",\nthe maximum ",(0,i.yg)("a",{parentName:"p",href:"/api/core/class/SerenityConfig#interactionTimeout"},"interaction timeout")," of ",(0,i.yg)("inlineCode",{parentName:"p"},"Wait.until"),"\ncan be set globally via ",(0,i.yg)("a",{parentName:"p",href:"/api/core/function/configure"},"Serenity/JS configuration"),",\nor per interaction:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"import { actorCalled, Duration, Wait } from '@serenity-js/core'\nimport { not, isPresent } from '@serenity-js/assertions'\n\nawait actorCalled('Edna').attemptsTo(\n    Wait.upTo(Duration.ofSeconds(2))\n        .until(spinner(), not(isPresent())),\n)\n")),(0,i.yg)("p",null,"However, unlike ",(0,i.yg)("inlineCode",{parentName:"p"},"Ensure.eventually")," which uses an ",(0,i.yg)("strong",{parentName:"p"},"exponential backoff"),"\nalgorithm to reduce the frequency of evaluation calls over time, ",(0,i.yg)("inlineCode",{parentName:"p"},"Wait.until")," instructs the actor\nto resolve the actual value at a ",(0,i.yg)("strong",{parentName:"p"},"consistent time interval")," between the evaluation calls:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example web scenario interacting with the widget"',title:'"Example',web:!0,scenario:!0,interacting:!0,with:!0,the:!0,'widget"':!0},"import { actorCalled, Duration, Wait } from '@serenity-js/core'\nimport { not, isPresent } from '@serenity-js/assertions'\n\nawait actorCalled('Edna').attemptsTo(\n    Wait.until(spinner(), not(isPresent()))\n        .pollingEvery(Duration.ofSeconds(1)),\n)\n")),(0,i.yg)("h2",{id:"implementing-custom-expectations"},"Implementing custom expectations"),(0,i.yg)("p",null,"Serenity/JS ",(0,i.yg)("a",{parentName:"p",href:"/api/assertions"},"assertions")," and ",(0,i.yg)("a",{parentName:"p",href:"/api/web"},"web")," modules provide expectations you'll need to implement\neven the most sophisticated test scenarios."),(0,i.yg)("p",null,"However, you can also implement ",(0,i.yg)("strong",{parentName:"p"},"custom expectations")," when needed. To do that, consult the examples in ",(0,i.yg)("a",{parentName:"p",href:"/api/core/class/Expectation"},(0,i.yg)("inlineCode",{parentName:"a"},"Expectation"))," API docs\nand the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js"},"Serenity/JS code base on GitHub"),"."))}y.isMDXComponent=!0}}]);