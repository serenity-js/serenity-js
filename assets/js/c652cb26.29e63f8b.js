"use strict";(self.webpackChunk_documentation_serenity_js_org=self.webpackChunk_documentation_serenity_js_org||[]).push([[514],{82247:(e,t,n)=>{n.d(t,{xA:()=>y,yg:()=>u});var r=n(14041);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},y=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),g=l(n),m=a,u=g["".concat(p,".").concat(m)]||g[m]||c[m]||s;return n?r.createElement(u,i(i({ref:t},y),{},{components:n})):r.createElement(u,i({ref:t},y))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[g]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},37390:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>y,frontMatter:()=>s,toc:()=>o});var r=n(89575),a=(n(14041),n(82247));const s={},i=void 0,o=[{value:"Serenity/JS Playwright Test",id:"serenityjs-playwright-test",level:2},{value:"Installation",id:"installation",level:3},{value:"Serenity/JS Playwright Fixtures",id:"serenityjs-playwright-fixtures",level:3},{value:"Serenity/JS Screenplay Pattern Actors",id:"serenityjs-screenplay-pattern-actors",level:3},{value:"Single-actor scenarios",id:"single-actor-scenarios",level:4},{value:"Multi-actor scenarios",id:"multi-actor-scenarios",level:4},{value:"Customising Actors",id:"customising-actors",level:4},{value:"Customising test fixtures",id:"customising-test-fixtures",level:4},{value:"UI Component Testing",id:"ui-component-testing",level:3},{value:"Using Serenity/JS Screenplay Pattern Actors for Component Testing",id:"using-serenityjs-screenplay-pattern-actors-for-component-testing",level:4},{value:"Serenity Reports",id:"serenity-reports",level:3},{value:"Reference implementation",id:"reference-implementation",level:3},{value:"\ud83d\udce3 Stay up to date",id:"-stay-up-to-date",level:2},{value:"\ud83d\udc9b Support Serenity/JS",id:"-support-serenityjs",level:2}],p={toc:o},l="wrapper";function y(e){let{components:t,...n}=e;return(0,a.yg)(l,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://www.linkedin.com/company/serenity-js"},(0,a.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin",alt:"Follow Serenity/JS on LinkedIn"})),"\n",(0,a.yg)("a",{parentName:"p",href:"https://www.youtube.com/@serenity-js"},(0,a.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube",alt:"Watch Serenity/JS on YouTube"})),"\n",(0,a.yg)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},(0,a.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix",alt:"Join Serenity/JS Community Chat"})),"\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/sponsors/serenity-js"},(0,a.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Support-@serenity--js-703EC8?logo=github",alt:"Support Serenity/JS on GitHub"}))),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org"},"Serenity/JS")," is an innovative open-source framework designed to make acceptance and regression testing\nof complex software systems faster, more collaborative and easier to scale."),(0,a.yg)("p",null,"\u2b50\ufe0f Get started with Serenity/JS!"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://serenity-js.org/handbook/web-testing/your-first-web-scenario"},"Serenity/JS web testing tutorial")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://serenity-js.org/handbook"},"Serenity/JS Handbook")," and ",(0,a.yg)("a",{parentName:"li",href:"https://serenity-js.org/handbook/getting-started/"},"Getting Started guides")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://serenity-js.org/api/core"},"API documentation")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://serenity-js.org/handbook/getting-started/project-templates/"},"Serenity/JS Project Templates on GitHub"))),(0,a.yg)("p",null,"\ud83d\udc4b Join the Serenity/JS Community!"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Meet other Serenity/JS developers and maintainers on the ",(0,a.yg)("a",{parentName:"li",href:"https://matrix.to/#/#serenity-js:gitter.im"},"Serenity/JS Community chat channel"),","),(0,a.yg)("li",{parentName:"ul"},"Find answers to your Serenity/JS questions on the ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/orgs/serenity-js/discussions/categories/how-do-i"},"Serenity/JS Forum"),","),(0,a.yg)("li",{parentName:"ul"},"Learn how to ",(0,a.yg)("a",{parentName:"li",href:"https://serenity-js.org/community/contributing/"},"contribute to Serenity/JS"),","),(0,a.yg)("li",{parentName:"ul"},"Support the project and gain access to ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/serenity-js/playbooks"},"Serenity/JS Playbooks")," by becoming a ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/sponsors/serenity-js"},"Serenity/JS GitHub Sponsor"),"!")),(0,a.yg)("h2",{id:"serenityjs-playwright-test"},"Serenity/JS Playwright Test"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/playwright-test/"},(0,a.yg)("inlineCode",{parentName:"a"},"@serenity-js/playwright-test"))," module offers a Serenity/JS reporter\nand fixtures that integrate ",(0,a.yg)("a",{parentName:"p",href:"https://playwright.dev/docs/intro"},"Playwright Test")," with Serenity/JS Screenplay Pattern APIs."),(0,a.yg)("h3",{id:"installation"},"Installation"),(0,a.yg)("p",null,"To install this module, use an existing ",(0,a.yg)("a",{parentName:"p",href:"https://playwright.dev/docs/intro"},"Playwright Test project")," or generate a new one by running:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"npm init playwright@latest\n")),(0,a.yg)("p",null,"Install the below Serenity/JS modules in your Playwright Test project directory:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"npm install --save-dev @serenity-js/assertions @serenity-js/console-reporter @serenity-js/core @serenity-js/serenity-bdd @serenity-js/web @serenity-js/playwright @serenity-js/playwright-test\n")),(0,a.yg)("p",null,"To learn more about Serenity/JS and how to use it on your project, follow the ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/handbook/getting-started/serenity-js-with-playwright-test/"},"Serenity/JS Getting Started guide for Playwright Test"),"."),(0,a.yg)("h3",{id:"serenityjs-playwright-fixtures"},"Serenity/JS Playwright Fixtures"),(0,a.yg)("p",null,"To use Serenity/JS Screenplay Pattern APIs and benefit from the in-depth reporting capabilities,\nimport Serenity/JS test fixtures instead of the default ones:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"// example.spec.ts\n+ import { test } from '@serenity-js/playwright-test'\n- import { test } from '@playwright/test'\n\ntest.describe('Serenity Screenplay with Playwright', () => {\n    \n    test.describe('New Todo', () => {\n\n        test('should allow me to add todo items', async ({ page }) => {\n            //...\n        })\n    })\n})\n")),(0,a.yg)("p",null,"If you prefer, Serenity/JS also offers the more concise BDD-style ",(0,a.yg)("inlineCode",{parentName:"p"},"describe/it")," syntax:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// example.spec.ts\nimport { describe, it, test } from '@serenity-js/playwright-test'\n\ntest.use({\n    headless: true,\n})\n\ndescribe('Serenity Screenplay with Playwright', () => {\n    \n    describe('New Todo', () => {\n\n        it('should allow me to add todo items', async ({ page }) => {\n            //...\n        })\n    })\n})\n")),(0,a.yg)("h3",{id:"serenityjs-screenplay-pattern-actors"},"Serenity/JS Screenplay Pattern Actors"),(0,a.yg)("p",null,"Serenity/JS test fixtures simplify how you instantiate and use ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/core/class/Actor/"},"Serenity/JS Screenplay Pattern Actors"),"."),(0,a.yg)("h4",{id:"single-actor-scenarios"},"Single-actor scenarios"),(0,a.yg)("p",null,"If your tests need only a single actor, you can inject it using the ",(0,a.yg)("inlineCode",{parentName:"p"},"actor")," fixture.\nTo configure the name of your default actor, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"defaultActorName")," configuration property:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// example.spec.ts\n\nimport { describe, it, test } from '@serenity-js/playwright-test'   // import fixtures\nimport { Navigate, Page } from '@serenity-js/playwright'            // import Screenplay Pattern web APIs\nimport { Ensure, equals } from '@serenity-js/assertions'            // import Screenplay Pattern assertion APIs                            \n\ntest.use({\n    headless: true,\n    defaultActorName: 'Serena'  // change default actor name\n})\n\ndescribe('Serenity Screenplay with Playwright', () => {\n    \n    describe('New Todo', () => {\n\n        // inject default actor:\n        it('should allow me to add todo items', async ({ actor }) => { \n            \n            // define test workflow\n            await actor.attemptsTo(                                                  \n                Navigate.to('https://todo-app.serenity-js.org/'),\n                Ensure.that(Page.current().title(), equals('Serenity/JS TodoApp')),\n            )\n        })\n    })\n})\n")),(0,a.yg)("h4",{id:"multi-actor-scenarios"},"Multi-actor scenarios"),(0,a.yg)("p",null,"For multi-actor scenarios where you need each actor to use a separate browser, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"actorCalled")," fixture.\nYou can also use this pattern to override the default actor name on a per-scenario basis:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// example.spec.ts\n\nimport { describe, it, test } from '@serenity-js/playwright-test'   // import fixtures\n\ndescribe('Serenity Screenplay with Playwright', () => {\n    \n    describe('Chat app', () => {\n\n        it('should allow actors to send and receive messages', async ({ actorCalled }) => { \n\n            // define part of the workflow performed by the first actor:\n            await actorCalled('Alice').attemptsTo(                               \n                // navigate to a chat app\n                // post a message to Bob\n            )\n\n            // define parts of the workflow performed by the any other actors:\n            await actorCalled('Bob').attemptsTo(                                 \n                // navigate to a chat app\n                // post a reply to Alice\n            )\n\n            // Note that invoking actorCalled(name) multiple times\n            // while using the same name and within the scope of a single test\n            // returns the same actor, so you don't need to cache them:\n            await actorCalled('Alice').attemptsTo(                              \n                // check if the reply from Bob is received                      \n            )                                                                   \n        })\n    })\n})\n")),(0,a.yg)("h4",{id:"customising-actors"},"Customising Actors"),(0,a.yg)("p",null,"The default ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/core/class/Cast"},"cast")," of actors is limited to using a single ability\nto ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/playwright/class/BrowseTheWebWithPlaywright"},(0,a.yg)("inlineCode",{parentName:"a"},"BrowseTheWebWithPlaywright")),"."),(0,a.yg)("p",null,"If you'd like to give your actors additional abilities, like to ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/core/class/TakeNotes"},(0,a.yg)("inlineCode",{parentName:"a"},"TakeNotes")),",\n",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/rest/class/CallAnApi"},(0,a.yg)("inlineCode",{parentName:"a"},"CallAnApi")),",\nor ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/local-server/class/ManageALocalServer"},(0,a.yg)("inlineCode",{parentName:"a"},"ManageALocalServer")),", you can install the relevant Serenity/JS module\nand configure them as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// example.spec.ts\n\nimport { Cast, TakeNotes } from '@serenity-js/core'\nimport { test } from '@serenity-js/playwright-test'\nimport { BrowseTheWebWithPlaywright } from '@serenity-js/playwright'\nimport { CallAnApi } from '@serenity-js/rest'                            \n\ntest.use({\n    actors: async ({ browser, baseURL }, use) => {\n        await use(\n            Cast.where(actor => actor.whoCan(\n                BrowseTheWebWithPlaywright.using(browser),\n                TakeNotes.usingAnEmptyNotepad(),\n                CallAnApi.at(baseURL),\n            ))\n        )\n    },\n})\n")),(0,a.yg)("p",null,"For scenarios where different actors need to be configured differently, you can also implement your own ",(0,a.yg)("inlineCode",{parentName:"p"},"Cast"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// example.spec.ts\n\nimport { Cast } from '@serenity-js/core'\nimport { BrowseTheWebWithPlaywright, PlaywrightOptions } from '@serenity-js/playwright'\nimport { test } from '@serenity-js/playwright-test'\nimport { CallAnApi } from '@serenity-js/rest'\nimport { Browser } from 'playwright'\n\nclass Actors implements Cast {\n    constructor(\n        private readonly browser: Browser,\n        private readonly options: PlaywrightOptions,\n    ) {\n    }\n\n    prepare(actor: Actor) {\n        switch (actor.name) {\n            case 'James':\n                return actor.whoCan(BrowseTheWebWithPlaywright.using(this.browser, this.options))\n            default:\n                return actor.whoCan(CallAnApi.at(this.options.baseURL))\n        }\n    }\n}\n\ntest.use({\n    actors: async ({ browser, config }) => {\n        await use(new Actors(browser, {\n            defaultNavigationWaitUntil: 'domcontentloaded'\n        }))\n    }\n})\n")),(0,a.yg)("h4",{id:"customising-test-fixtures"},"Customising test fixtures"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/playwright-test/function/useFixtures/"},(0,a.yg)("inlineCode",{parentName:"a"},"useFixtures"))," lets you configure\nSerenity/JS Screenplay Pattern actors in a single place,\nand define custom ",(0,a.yg)("a",{parentName:"p",href:"https://playwright.dev/docs/test-fixtures"},"test fixtures")," if needed.   "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// my-custom-api.ts\nexport const { \n    describe, it, test, beforeAll, beforeEach, afterEach, afterAll, expect\n} = useFixtures<{ email: string }>({\n    \n    // Override Serenity/JS fixtures:\n    actors: async ({ browser, baseURL }, use) => {\n        await use(\n            Cast.where(actor => actor.whoCan(\n                BrowseTheWebWithPlaywright.using(browser),\n                TakeNotes.usingAnEmptyNotepad(),\n                CallAnApi.at(baseURL),\n            ))\n        )\n    },\n    \n    // Add your own fixtures:\n    email: async ({ actor }, use) => {\n        await use(`${ actor.name }@example.org`);\n    },    \n})\n")),(0,a.yg)("p",null,"With the custom test API definition in place, use it in your test files instead of the default one:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// example.spec.ts\nimport { Log } from '@serenity-js/core'\n\nimport { describe, it, test } from './my-custom-api'    // Note the custom test API\n\ndescribe('Serenity Screenplay with Playwright', () => {\n\n    describe('New Todo', () => {\n\n        // inject default actor:\n        it('should allow me to add todo items', async ({ actor, email }) => {\n\n            // define test workflow\n            await actor.attemptsTo(\n                Log.the(email),\n            )\n        })\n    })\n})\n")),(0,a.yg)("h3",{id:"ui-component-testing"},"UI Component Testing"),(0,a.yg)("p",null,"You can use Serenity/JS and Playwright Test to write UI component tests and ",(0,a.yg)("strong",{parentName:"p"},"reuse your test code")," between component and end-to-end test suites."),(0,a.yg)("p",null,"To get started with component testing:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Follow the ",(0,a.yg)("a",{parentName:"li",href:"https://playwright.dev/docs/test-components"},"Playwright Test Component Testing tutorial")," to configure your component test suite,"),(0,a.yg)("li",{parentName:"ul"},"Use Serenity/JS test fixtures instead of the default ones.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},"// src/App.spec.tsx\n- import { test, expect } from '@playwright/experimental-ct-react'\n+ import { test as componentTest } from '@playwright/experimental-ct-react'\n+ import { useBase } from '@serenity-js/playwright-test'\n\n+ const { test, expect } = useBase(componentTest)\n\nimport App from './App'\n\ntest.use({ viewport: { width: 500, height: 500 } })\n\ntest('should work', async ({ mount }) => {\n  const component = await mount(<App />)\n  await expect(component).toContainText('Learn React')\n})\n")),(0,a.yg)("h4",{id:"using-serenityjs-screenplay-pattern-actors-for-component-testing"},"Using Serenity/JS Screenplay Pattern Actors for Component Testing"),(0,a.yg)("p",null,"Serenity/JS ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/playwright-test/function/useBase/"},(0,a.yg)("inlineCode",{parentName:"a"},"useBase(test)"))," creates\na test API that gives you access to all the ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/playwright-test/interface/SerenityFixtures/"},(0,a.yg)("inlineCode",{parentName:"a"},"SerenityFixtures")),"\nyou could access in any other regular end-to-end test."),(0,a.yg)("p",null,"This capability allows you to use ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/core/class/Actor/"},"Serenity/JS Actors")," and design\nand experiment with your ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/api/core/class/Task/"},"Screenplay Pattern Tasks"),"\nbefore incorporating them in your high-level acceptance and end-to-end tests."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import { test as componentTest } from '@playwright/experimental-ct-react'\nimport { Ensure, contain } from '@serenity-js/assertions'\nimport { useBase } from '@serenity-js/playwright-test'\nimport { Enter, PageElement, CssClasses } from '@serenity-js/web'\n\nimport EmailInput from './EmailInput'\n\nconst { it, describe } = useBase(componentTest).useFixtures<{ emailAddress: string }>({\n    emailAddress: ({ actor }, use) => {\n        use(`${ actor.name }@example.org`)\n    }\n})\n\ndescribe('EmailInput', () => {\n\n    it('allows valid email addresses', async ({ actor, mount, emailAddress }) => {\n        const nativeComponent = await mount(<EmailInput/>)\n\n        const component = PageElement.from(nativeComponent)\n\n        await actor.attemptsTo(\n            Enter.theValue(emailAddress).into(component),\n            Ensure.that(CssClasses.of(component), contain('valid')),\n        )\n    })\n})\n")),(0,a.yg)("h3",{id:"serenity-reports"},"Serenity Reports"),(0,a.yg)("p",null,"To use Serenity/JS reporting capabilities, register the ",(0,a.yg)("inlineCode",{parentName:"p"},"@serenity-js/playwright-test")," reporter in your\n",(0,a.yg)("inlineCode",{parentName:"p"},"playwright.config.ts"),' and define the appropriate reporting services (a.k.a. your "stage crew").'),(0,a.yg)("p",null,"For example, to enable ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/handbook/reporting/console-reporter/"},"Serenity/JS Console Reporter"),"\nand ",(0,a.yg)("a",{parentName:"p",href:"https://serenity-js.org/handbook/reporting/serenity-bdd-reporter/"},"Serenity BDD Reporter"),", install the relevant modules:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @serenity-js/console-reporter @serenity-js/serenity-bdd\n")),(0,a.yg)("p",null,"Next, configure your Playwright project as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// playwright.conf.ts\n\nimport type { PlaywrightTestConfig } from '@playwright/test'\n\nconst config: PlaywrightTestConfig = {\n    testDir: './spec',\n    \n    reporter: [\n        [ '@serenity-js/playwright-test', {\n            crew: [\n                '@serenity-js/console-reporter',\n                [ '@serenity-js/serenity-bdd', { specDirectory: './spec' } ],\n                [ '@serenity-js/core:ArtifactArchiver', { outputDirectory: 'target/site/serenity' } ],\n                // '@serenity-js/core:StreamReporter',\n            ]\n        }],\n\n        // optional\n        [ 'html', { open: 'never' } ],          // built-in Playwright HTML reporter\n    ],\n\n    // Other configuration omitted for brevity\n    // For details, see https://playwright.dev/docs/test-configuration\n}\n\nexport default config\n")),(0,a.yg)("p",null,"Note that Serenity/JS reporters work well with the built-in ",(0,a.yg)("a",{parentName:"p",href:"https://playwright.dev/docs/test-reporters"},"Playwright reporters"),"."),(0,a.yg)("h3",{id:"reference-implementation"},"Reference implementation"),(0,a.yg)("p",null,"You can find a reference implementation demonstrating how to integrate Serenity/JS with Playwright Test in the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js/tree/main/examples/playwright-test-todomvc"},"Serenity/JS\nGitHub repository"),"."),(0,a.yg)("h2",{id:"-stay-up-to-date"},"\ud83d\udce3 Stay up to date"),(0,a.yg)("p",null,"New features, tutorials, and demos are coming soon!\nFollow ",(0,a.yg)("a",{parentName:"p",href:"https://www.linkedin.com/company/serenity-js"},"Serenity/JS on LinkedIn"),",\nsubscribe to ",(0,a.yg)("a",{parentName:"p",href:"https://www.youtube.com/@serenity-js"},"Serenity/JS channel on YouTube")," and join the ",(0,a.yg)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},"Serenity/JS Community Chat")," to stay up to date!\nPlease also make sure to star \u2b50\ufe0f ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js"},"Serenity/JS on GitHub")," to help others discover the framework!"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://www.linkedin.com/company/serenity-js"},(0,a.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Follow-Serenity%2FJS%20-0077B5?logo=linkedin",alt:"Follow Serenity/JS on LinkedIn"})),"\n",(0,a.yg)("a",{parentName:"p",href:"https://www.youtube.com/@serenity-js"},(0,a.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Watch-@serenity--js-E62117?logo=youtube",alt:"Watch Serenity/JS on YouTube"})),"\n",(0,a.yg)("a",{parentName:"p",href:"https://matrix.to/#/#serenity-js:gitter.im"},(0,a.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Chat-Serenity%2FJS%20Community-FBD30B?logo=matrix",alt:"Join Serenity/JS Community Chat"})),"\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/serenity-js/serenity-js"},(0,a.yg)("img",{parentName:"a",src:"https://img.shields.io/github/stars/serenity-js/serenity-js?label=Serenity%2FJS&logo=github&style=badge",alt:"GitHub stars"}))),(0,a.yg)("h2",{id:"-support-serenityjs"},"\ud83d\udc9b Support Serenity/JS"),(0,a.yg)("p",null,"If you appreciate all the effort that goes into making sophisticated tools easy to work with, please support our work and become a Serenity/JS GitHub Sponsor today!"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/sponsors/serenity-js"},(0,a.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Support%20@serenity%2FJS-703EC8?style=for-the-badge&logo=github&logoColor=white",alt:"GitHub Sponsors"}))))}y.isMDXComponent=!0}}]);